import { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithCustomToken, onAuthStateChanged, signInAnonymously } from 'firebase/auth';
import { getFirestore, collection, query, where, onSnapshot, addDoc, deleteDoc, doc, orderBy } from 'firebase/firestore';
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';

// Main component of the application
const App = () => {
  // Get environment variables
  const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
  const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
  const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

  // State to manage data and application status
  const [transactions, setTransactions] = useState([]);
  const [monthlyTransactions, setMonthlyTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [showForm, setShowForm] = useState(false);

  // State to manage selected month and year
  const today = new Date();
  const [selectedDate, setSelectedDate] = useState(new Date(today.getFullYear(), today.getMonth(), today.getDate()));

  // State for the input form
  const [amount, setAmount] = useState('');
  const [description, setDescription] = useState('');
  const [isExpense, setIsExpense] = useState(true);
  const [category, setCategory] = useState('Ăn uống');
  const [transactionDate, setTransactionDate] = useState(today.toISOString().slice(0, 10));

  // List of categories and their corresponding icons
  const categories = [
    { name: 'Ăn uống', icon: 'M18.5 7h-2c0-1.65-1.35-3-3-3h-2c-1.65 0-3 1.35-3 3h-2c-2.76 0-5 2.24-5 5v2.85c0 1.28.87 2.39 2.08 2.81L7 22l-1-1 3.5-3.5L12 21l3.5-3.5 3.5 3.5-1-1 2.92-2.14C21.13 17.24 22 16.13 22 14.85V12c0-2.76-2.24-5-5-5zm-5.5 0h2c.55 0 1 .45 1 1v2h-4v-2c0-.55.45-1 1-1z' },
    { name: 'Phí giao lưu', icon: 'M20.5 4l-4.5 9L11.5 4h-1.3l2.8 7-2.8 7h1.3l4.5-9 4.5 9h1.3L22 12V4h-1.5zM3 15V4h1.5v11H3zM8 4h1.5v11H8z' },
    { name: 'Y tế', icon: 'M13 19h-2v-2h2v2zm0-4h-2V5h2v10zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z' },
    { name: 'Mỹ phẩm', icon: 'M18 6h-2c0-2.21-1.79-4-4-4S8 3.79 8 6H6c-1.1 0-2 0.9-2 2v10c0 1.1 0.9 2 2 2h12c1.1 0 2-0.9 2-2V8c0-1.1-0.9-2-2-2zM12 4c1.1 0 2 0.9 2 2h-4c0-1.1 0.9-2 2-2z' },
    { name: 'Tiền điện', icon: 'M13 3h-2v10h2V3zm4.7 15.35l-1.4-1.4c1.2-1.2 1.8-2.85 1.8-4.55h2c0 2.21-0.89 4.21-2.45 5.6zM8.4 16.65L7 18.05c-1.56-1.4-2.45-3.4-2.45-5.6h2c0 1.7 0.6 3.35 1.85 4.55z' },
    { name: 'Tiền nhà', icon: 'M12 3L4 9v12h16V9L12 3zm-1 15h2v-2h-2v2zm0-4h2v-2h-2v2zm0-4h2V7h-2v2z' },
    { name: 'Giáo dục', icon: 'M12 3L1 9l4 2.18V21h14V11.18l4-2.18L12 3zm0 14c-1.1 0-2-0.9-2-2s0.9-2 2-2s2 0.9 2 2s-0.9 2-2 2z' },
    { name: 'Quần áo', icon: 'M12 3L1 9l4 2.18V21h14V11.18l4-2.18L12 3zm0 14c-1.1 0-2-0.9-2-2s0.9-2 2-2s2 0.9 2 2s-0.9 2-2 2z' },
    { name: 'Chi tiêu khác', icon: 'M20 4H4c-1.11 0-1.99 0.89-1.99 2L2 18c0 1.11 0.89 2 2 2h16c1.11 0 2-0.89 2-2V6c0-1.11-0.89-2-2-2zm0 14H4V8h16v10z' }
  ];

  // Define a fixed color map for categories to ensure consistency
  const categoryColors = {
    'Ăn uống': '#FCD34D', // Yellow
    'Phí giao lưu': '#FCD34D', // Yellow
    'Y tế': '#34D399', // Green
    'Mỹ phẩm': '#F472B6', // Pink
    'Tiền điện': '#3B82F6', // Blue
    'Tiền nhà': '#F9A8D4', // Light pink
    'Giáo dục': '#EF4444', // Red
    'Quần áo': '#8B5CF6', // Purple
    'Chi tiêu khác': '#6B7280', // Gray
    'Thu nhập khác': '#10B981', // Green
  };
  
  // Initialize Firebase and authenticate user
  useEffect(() => {
    try {
      if (Object.keys(firebaseConfig).length > 0) {
        const app = initializeApp(firebaseConfig);
        const firestore = getFirestore(app);
        const firebaseAuth = getAuth(app);
        setDb(firestore);
        setAuth(firebaseAuth);

        const unsubscribe = onAuthStateChanged(firebaseAuth, async (user) => {
          if (user) {
            setUserId(user.uid);
            setLoading(false);
          } else {
            if (initialAuthToken) {
              await signInWithCustomToken(firebaseAuth, initialAuthToken);
            } else {
              await signInAnonymously(firebaseAuth);
            }
          }
        });

        // Cleanup function for the listener
        return () => unsubscribe();
      } else {
        console.error("Firebase config is missing.");
        setLoading(false);
      }
    } catch (error) {
      console.error("Failed to initialize Firebase:", error);
      setLoading(false);
    }
  }, [firebaseConfig, initialAuthToken]);

  // Listen for daily data from Firestore
  useEffect(() => {
    if (db && userId) {
      const startDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());
      const endDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate(), 23, 59, 59);

      const transactionsCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/transactions`);
      
      const q = query(
        transactionsCollectionRef,
        where('createdAt', '>=', startDate),
        where('createdAt', '<=', endDate),
        orderBy('createdAt', 'desc')
      );

      const unsubscribe = onSnapshot(q, (snapshot) => {
        const data = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
        }));
        setTransactions(data);
      });

      return () => unsubscribe();
    }
  }, [db, userId, appId, selectedDate]);
  
  // Listen for monthly data from Firestore
  useEffect(() => {
    if (db && userId) {
      const startDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);
      const endDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0, 23, 59, 59);

      const transactionsCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/transactions`);
      
      const q = query(
        transactionsCollectionRef,
        where('createdAt', '>=', startDate),
        where('createdAt', '<=', endDate),
        orderBy('createdAt', 'desc')
      );

      const unsubscribe = onSnapshot(q, (snapshot) => {
        const data = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
        }));
        setMonthlyTransactions(data);
      });

      return () => unsubscribe();
    }
  }, [db, userId, appId, selectedDate]);

  // Handle form submission to add a transaction
  const handleAddTransaction = async (e) => {
    e.preventDefault();
    if (!amount || !description || !db || !userId || !transactionDate) return;

    try {
      const date = new Date(transactionDate);
      const now = new Date();
      date.setHours(now.getHours());
      date.setMinutes(now.getMinutes());
      date.setSeconds(now.getSeconds());

      const transactionData = {
        amount: parseFloat(amount),
        description,
        isExpense,
        category,
        createdAt: date,
      };

      const transactionsCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/transactions`);
      await addDoc(transactionsCollectionRef, transactionData);

      setAmount('');
      setDescription('');
      setIsExpense(true);
      setCategory('Ăn uống');
      setTransactionDate(new Date().toISOString().slice(0, 10));
      setShowForm(false);
    } catch (e) {
      console.error("Lỗi khi thêm giao dịch: ", e);
    }
  };
  
  // Handle amount input changes
  const handleAmountChange = (e) => {
    const rawValue = e.target.value.replace(/\./g, '');
    const numberValue = parseFloat(rawValue);

    if (!isNaN(numberValue)) {
      setAmount(numberValue.toString());
      e.target.value = numberValue.toLocaleString('vi-VN');
    } else {
      setAmount('');
      e.target.value = '';
    }
  };

  // Handle transaction deletion
  const handleDeleteTransaction = async (id) => {
    try {
      await deleteDoc(doc(db, `artifacts/${appId}/users/${userId}/transactions`, id));
    } catch (e) {
      console.error("Lỗi khi xóa giao dịch: ", e);
    }
  };

  // Function to format amount to a shortened string
  const formatAmount = (num) => {
    if (Math.abs(num) >= 1000000000) {
      return (num / 1000000000).toFixed(1) + ' tỷ';
    }
    if (Math.abs(num) >= 1000000) {
      return (num / 1000000).toFixed(1) + ' tr';
    }
    if (Math.abs(num) >= 1000) {
      return (num / 1000).toFixed(1) + 'k';
    }
    return num.toLocaleString('vi-VN');
  };
  
  // Calculate total income, expense, and balance for the month
  const totalMonthlyIncome = monthlyTransactions
    .filter(t => !t.isExpense)
    .reduce((sum, t) => sum + t.amount, 0);

  const totalMonthlyExpense = monthlyTransactions
    .filter(t => t.isExpense)
    .reduce((sum, t) => sum + t.amount, 0);

  const monthlyBalance = totalMonthlyIncome - totalMonthlyExpense;

  // Calculate total income, expense, and balance for the selected day
  const totalDailyIncome = transactions
    .filter(t => !t.isExpense)
    .reduce((sum, t) => sum + t.amount, 0);

  const totalDailyExpense = transactions
    .filter(t => t.isExpense)
    .reduce((sum, t) => sum + t.amount, 0);

  const dailyBalance = totalDailyIncome - totalDailyExpense;


  // Get days in the current month
  const getDaysInMonth = (year, month) => {
    return new Date(year, month, 0).getDate();
  };
  
  const daysInMonth = getDaysInMonth(selectedDate.getFullYear(), selectedDate.getMonth() + 1);
  const firstDayOfMonth = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1).getDay();
  const calendarDays = [];
  
  // Fill in empty slots for previous month
  for (let i = 0; i < (firstDayOfMonth === 0 ? 6 : firstDayOfMonth - 1); i++) {
    calendarDays.push(null);
  }
  
  // Fill in days of the current month
  for (let i = 1; i <= daysInMonth; i++) {
    calendarDays.push(i);
  }
  
  const handleMonthChange = (direction) => {
    const newDate = new Date(selectedDate);
    newDate.setMonth(newDate.getMonth() + direction);
    setSelectedDate(newDate);
  };
  
  const handleDayClick = (day) => {
    if (day) {
      const newDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), day);
      setSelectedDate(newDate);
    }
  };
  
  // Get icon and color based on category name
  const getCategoryIcon = (categoryName) => {
    const iconMap = {
      'Ăn uống': 'M18.5 7h-2c0-1.65-1.35-3-3-3h-2c-1.65 0-3 1.35-3 3h-2c-2.76 0-5 2.24-5 5v2.85c0 1.28.87 2.39 2.08 2.81L7 22l-1-1 3.5-3.5L12 21l3.5-3.5 3.5 3.5-1-1 2.92-2.14C21.13 17.24 22 16.13 22 14.85V12c0-2.76-2.24-5-5-5zm-5.5 0h2c.55 0 1 .45 1 1v2h-4v-2c0-.55.45-1 1-1z',
      'Phí giao lưu': 'M20.5 4l-4.5 9L11.5 4h-1.3l2.8 7-2.8 7h1.3l4.5-9 4.5 9h1.3L22 12V4h-1.5zM3 15V4h1.5v11H3zM8 4h1.5v11H8z' ,
      'Y tế': 'M13 19h-2v-2h2v2zm0-4h-2V5h2v10zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z',
      'Mỹ phẩm': 'M18 6h-2c0-2.21-1.79-4-4-4S8 3.79 8 6H6c-1.1 0-2 0.9-2 2v10c0 1.1 0.9 2 2 2h12c1.1 0 2-0.9 2-2V8c0-1.1-0.9-2-2-2zM12 4c1.1 0 2 0.9 2 2h-4c0-1.1 0.9-2 2-2z',
      'Tiền điện': 'M13 3h-2v10h2V3zm4.7 15.35l-1.4-1.4c1.2-1.2 1.8-2.85 1.8-4.55h2c0 2.21-0.89 4.21-2.45 5.6zM8.4 16.65L7 18.05c-1.56-1.4-2.45-3.4-2.45-5.6h2c0 1.7 0.6 3.35 1.85 4.55z',
      'Tiền nhà': 'M12 3L4 9v12h16V9L12 3zm-1 15h2v-2h-2v2zm0-4h2v-2h-2v2zm0-4h2V7h-2v2z',
      'Giáo dục': 'M12 3L1 9l4 2.18V21h14V11.18l4-2.18L12 3zm0 14c-1.1 0-2-0.9-2-2s0.9-2 2-2s2 0.9 2 2s-0.9 2-2 2z',
      'Quần áo': 'M12 3L1 9l4 2.18V21h14V11.18l4-2.18L12 3zm0 14c-1.1 0-2-0.9-2-2s0.9-2 2-2s2 0.9 2 2s-0.9 2-2 2z',
      'Chi tiêu khác': 'M20 4H4c-1.11 0-1.99 0.89-1.99 2L2 18c0 1.11 0.89 2 2 2h16c1.11 0 2-0.89 2-2V6c0-1.11-0.89-2-2-2zm0 14H4V8h16v10z',
      'Thu nhập khác': 'M20 4H4c-1.11 0-1.99 0.89-1.99 2L2 18c0 1.11 0.89 2 2 2h16c1.11 0 2-0.89 2-2V6c0-1.11-0.89-2-2-2zm0 14H4V8h16v10z'
    };
    return iconMap[categoryName] || 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z';
  };
  
  const getCategoryColor = (categoryName) => {
    const colorMap = {
      'Ăn uống': '#FCD34D', // Orange
      'Phí giao lưu': '#FFCA28', // Light orange
      'Y tế': '#4CAF50', // Green
      'Mỹ phẩm': '#F48FB1', // Pink
      'Tiền điện': '#03A9F4', // Light blue
      'Tiền nhà': '#FFB74D', // Orange
      'Giáo dục': '#E57373', // Red
      'Quần áo': '#5C6BC0', // Indigo
      'Chi tiêu khác': '#9E9E9E', // Gray
      'Thu nhập khác': '#4CAF50', // Green
      'Tiết kiệm': '#FF5252',
    };
    return colorMap[categoryName] || '#6B7280';
  };


  const getDayOfWeek = (date) => {
    const days = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
    return days[date.getDay()];
  };
  
  // Create data for the pie chart
  const expenseData = monthlyTransactions
    .filter(t => t.isExpense)
    .reduce((acc, t) => {
      const existingCategory = acc.find(item => item.name === t.category);
      if (existingCategory) {
        existingCategory.value += t.amount;
      } else {
        acc.push({ name: t.category, value: t.amount });
      }
      return acc;
    }, []);
  
  return (
    <div className="min-h-screen bg-gray-100 text-gray-800 p-4 font-sans antialiased">
      <div className="max-w-xl mx-auto bg-white rounded-xl shadow-lg p-6 md:p-8">
        <header className="py-4">
          <div className="flex justify-between items-center mb-4">
            <button 
              onClick={() => handleMonthChange(-1)} 
              className="text-xl p-2 rounded-full hover:bg-gray-300 transition duration-300"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 24 24" fill="currentColor">
                <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
              </svg>
            </button>
            <span className="text-lg font-bold">tháng {selectedDate.getMonth() + 1} năm {selectedDate.getFullYear()}</span>
            <button 
              onClick={() => handleMonthChange(1)} 
              className="text-xl p-2 rounded-full hover:bg-gray-300 transition duration-300"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 24 24" fill="currentColor">
                <path d="M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12z"/>
              </svg>
            </button>
          </div>
          <div className="grid grid-cols-7 gap-1 text-center font-medium text-xs text-gray-500">
            <div>T2</div>
            <div>T3</div>
            <div>T4</div>
            <div>T5</div>
            <div>T6</div>
            <div>T7</div>
            <div>CN</div>
          </div>
          <div className="grid grid-cols-7 gap-1 text-center text-gray-800 mt-2">
            {calendarDays.map((day, index) => (
              <button
                key={index}
                onClick={() => handleDayClick(day)}
                className={`flex flex-col items-center justify-center h-12 rounded-lg 
                  ${day ? 'hover:bg-gray-200 transition duration-200' : 'bg-transparent'}
                  ${day === selectedDate.getDate() ? 'bg-pink-500 text-white' : 'bg-white'}
                `}
                disabled={!day}
              >
                {day}
              </button>
            ))}
          </div>
        </header>

        {/* Monthly Financial overview */}
        <section className="mt-8 space-y-4">
           <h2 className="text-xl font-bold">Tổng quan tháng</h2>
           <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center text-sm font-medium">
            <div className="p-4 rounded-lg bg-gray-200">
              <div className="text-green-600 text-lg font-bold">{formatAmount(totalMonthlyIncome)}</div>
              <div className="text-xs text-gray-600">Thu Nhập</div>
            </div>
            <div className="p-4 rounded-lg bg-gray-200">
              <div className="text-red-600 text-lg font-bold">{formatAmount(totalMonthlyExpense)}</div>
              <div className="text-xs text-gray-600">Chi Tiêu</div>
            </div>
            <div className="p-4 rounded-lg bg-gray-200">
              <div className={`text-lg font-bold ${monthlyBalance >= 0 ? 'text-blue-600' : 'text-red-600'}`}>
                {formatAmount(monthlyBalance)}
              </div>
              <div className="text-xs text-gray-600">Số Dư</div>
            </div>
          </div>
        </section>

        <section className="mt-8 space-y-4">
          <h2 className="text-xl font-bold">Chi tiêu ngày {selectedDate.getDate()}</h2>
          
          <div className="space-y-6 mt-4">
            {transactions.length > 0 ? (
              transactions.map(t => (
                <div key={t.id} className="bg-gray-200 p-4 rounded-xl flex justify-between items-center transition-transform duration-200 transform hover:scale-[1.02] cursor-pointer relative overflow-hidden">
                  <div className="absolute inset-0 bg-gray-300 opacity-0 transition-opacity duration-200 hover:opacity-100 z-0"></div>
                  <div className="flex items-center space-x-4 z-10">
                    <div className="p-3 rounded-xl flex-shrink-0" style={{ backgroundColor: getCategoryColor(t.category) }}>
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" viewBox="0 0 24 24" fill="currentColor">
                        <path d={getCategoryIcon(t.category)}/>
                      </svg>
                    </div>
                    <div>
                      <div className="font-bold text-gray-900">{t.description}</div>
                      <div className="text-sm text-gray-500">{t.category}</div>
                      <div className="text-xs text-gray-500 mt-1">
                        {t.createdAt.toDate().toLocaleString('vi-VN')}
                      </div>
                    </div>
                  </div>
                  <div className="text-right z-10">
                    <div className={`font-bold ${t.isExpense ? 'text-red-600' : 'text-green-600'}`}>
                      {t.isExpense ? '-' : '+'}{t.amount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}
                    </div>
                    <button
                      onClick={() => handleDeleteTransaction(t.id)}
                      className="text-red-500 text-xs mt-1 opacity-70 hover:opacity-100"
                    >
                      Xóa
                    </button>
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center text-sm text-gray-500 py-10">
                Chưa có giao dịch nào trong ngày này.
              </div>
            )}
          </div>
        </section>

        {/* Biểu đồ tròn chi phí */}
        {expenseData.length > 0 && (
          <section className="bg-gray-200 p-6 rounded-xl mt-8">
            <h3 className="text-center font-bold mb-4">Biểu đồ chi tiêu</h3>
            <ResponsiveContainer width="100%" height={200}>
              <PieChart>
                <Pie data={expenseData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={80} label={false}>
                  {expenseData.map((entry) => (
                    <Cell key={`cell-${entry.name}`} fill={getCategoryColor(entry.name)} />
                  ))}
                </Pie>
                <Tooltip formatter={(value) => value.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}/>
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </section>
        )}

        {/* Add transaction button */}
        <button
          onClick={() => setShowForm(!showForm)}
          className="fixed bottom-8 right-8 bg-green-500 text-white p-4 rounded-full shadow-lg z-50 transition duration-300 transform hover:scale-110"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
          </svg>
        </button>

        {showForm && (
          <div className="fixed inset-0 bg-white bg-opacity-70 flex items-center justify-center p-4 z-40">
            <div className="bg-gray-200 p-6 rounded-lg shadow-xl w-full max-w-md">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-bold text-gray-800">Thêm Giao Dịch</h2>
                <button onClick={() => setShowForm(false)} className="text-gray-600 hover:text-gray-800">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                  </svg>
                </button>
              </div>
              <form onSubmit={handleAddTransaction} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Số tiền</label>
                  <input
                    type="text"
                    value={amount}
                    onChange={handleAmountChange}
                    placeholder="Nhập số tiền"
                    required
                    className="w-full px-4 py-3 bg-white border border-gray-300 rounded-lg text-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Mô tả</label>
                  <input
                    type="text"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    placeholder="Nhập mô tả"
                    required
                    className="w-full px-4 py-3 bg-white border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Ngày</label>
                  <input
                    type="date"
                    value={transactionDate}
                    onChange={(e) => setTransactionDate(e.target.value)}
                    required
                    className="w-full px-4 py-3 bg-white border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div className="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4">
                  <div className="flex-1">
                    <label className="block text-sm font-medium text-gray-600 mb-1">Loại</label>
                    <select
                      value={isExpense}
                      onChange={(e) => setIsExpense(e.target.value === 'true')}
                      className="w-full px-4 py-3 bg-white border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value={true}>Chi phí</option>
                      <option value={false}>Thu nhập</option>
                    </select>
                  </div>
                  <div className="flex-1">
                    <label className="block text-sm font-medium text-gray-600 mb-1">Danh mục</label>
                    <select
                      value={category}
                      onChange={(e) => setCategory(e.target.value)}
                      className="w-full px-4 py-3 bg-white border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      {categories.map((cat) => (
                        <option key={cat.name} value={cat.name}>{cat.name}</option>
                      ))}
                    </select>
                  </div>
                </div>
                <button
                  type="submit"
                  className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 rounded-lg transition duration-300"
                >
                  Thêm Giao Dịch
                </button>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
